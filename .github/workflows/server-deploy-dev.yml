on:
  push:
    branches:
      - dev  # push되면 실행될 브랜치를 선택합니다.
#  workflow_dispatch: # 수동 실행
#

#본인이 설정한 값을 여기서 채워넣기
#리전,버킷 이름, CodeDeploy앱 이름, CodeDeploy배포 그룹 이름
env:
  AWS_REGION: ap-northeast-1
  S3_BUCKET_NAME: chukapoka-server-dev-bucket
  CODE_DEPLOY_APPLICATION_NAME: chukapoka-server-dev-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: chukapoka-server-dev-deployment-group

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew -p . clean build
        shell: bash

      # (4) AWS인증 (IAM사용자 Access Key, Secret Key활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}
      # (5)빌드 결과물을 S3버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \\
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \\
            --ignore-hidden-files \\
            --s3-location s3://${{ env.S3_BUCKET_NAME}}/$GITHUB_SHA.zip \\
            --source .

      # (6) S3버킷에 있는 파일을 대상으로 CodeDeploy실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \\
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \\
            --deployment-config-name CodeDeployDefault.AllAtOnce \\
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \\
            --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=$GITHUB_SHA.zip,bundleType=zip